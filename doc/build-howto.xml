<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" [
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
  <!ENTITY % gtkdocentities SYSTEM "xml/gtkdocentities.ent">
  %gtkdocentities;
]>

<refentry id="build-howto">
  <refmeta>
    <refentrytitle>Compiling with &package_string;</refentrytitle>
    <manvolnum>3</manvolnum>
  </refmeta>

  <refnamediv>
    <refname>Compiling with &package_string;</refname><refpurpose>Notes on compiling</refpurpose>
  </refnamediv>

  <refsect2>
    <title>Using pkg-config</title>

    <para> Like other GNOME libraries,
    <application>&package_string;</application> uses
    <application>pkg-config</application> to provide compiler options. The
    package name is
    "<literal>&package_ver_str;</literal>". So in
    your <literal>configure</literal> script, you might specify something
    like: </para>

    <informalexample><programlisting>
      PKG_CHECK_MODULES(LIBHANDY, [&package_string;-&package_api_version;])
      AC_SUBST(LIBHANDY_CFLAGS)
      AC_SUBST(LIBHANDY_LIBS)
    </programlisting></informalexample>

    <para>
      Or if using meson/ninja use a <literal>dependency('&package_string;-&package_api_version;')
    </literal> dependency.
    </para>

    <para>
      The "<literal>&package_api_version;</literal>" in the package name is the "API version"
      (indicating "the version of the <application>&package_string;</application> API
      that first appeared in version &package_api_version;") and is essentially just part of
      the package name.
    </para>

    <para>
      When using the <productname>meson build system</productname> you can declare a dependency like
    </para>
    <informalexample><programlisting>
      dependency('libhandy-0.0')
    </programlisting></informalexample>

  </refsect2>

  <refsect2>
    <title>Headers</title>

    <para>
      Code using <application>&package_string;</application> should do:
    </para>

    <informalexample><programlisting>
      #define HANDY_USE_UNSTABLE_API
      #include &lt;handy.h&gt;
    </programlisting></informalexample>

    <para>
      Including individual headers rather than <literal>handy.h</literal> is not
      recommended.
    </para>
    <para>
      Since the library has not stable API yet <literal>HANDY_USE_UNSTABLE_API</literal> must
      be defined for compilation to succeed.
    </para>

  </refsect2>

</refentry>
