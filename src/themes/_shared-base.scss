@import 'definitions';

// HdyActionRow

row {
  label.subtitle {
    font-size: smaller;
    opacity: 0.55;
    text-shadow: none;
  }

  > box.header {
    margin-left: 12px;
    margin-right: 12px;
    min-height: 50px;

    > box.title {
      margin-top: 8px;
      margin-bottom: 8px;
    }
  }
}

// HdyComboRow

popover.combo list {
  min-width: 200px;
}

// HdyExpanderRow

row.expander {
  // Drop transparent background on expander rows to let nested rows handle it,
  // avoiding double highlights.
  background-color: transparent;

  list.nested > row {
    background-color: hdyalpha($bg_color, 0.5);
    border-color: hdyalpha($borders_color, 0.7);
    border-style: solid;
    border-width: 1px 0px 0px 0px;
  }

  // HdyExpanderRow arrow rotation

  image.expander-row-arrow {
    transition: 200ms cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  &:checked image.expander-row-arrow {
    -gtk-icon-transform: rotate(0turn);
  }

  &:not(:checked) image.expander-row-arrow {
    opacity: 0.55;
    text-shadow: none;

    &:dir(ltr) {
      -gtk-icon-transform: rotate(-0.25turn);
    }

    &:dir(rtl) {
      -gtk-icon-transform: rotate(0.25turn);
    }
  }

  &:checked image.expander-row-arrow:not(:disabled) {
    color: $selected_bg_color;
  }

  & image.expander-row-arrow:disabled {
    color: $insensitive_fg_color;
  }
}

// Preferences

preferencespage label.h4 {
  font-weight: bold;
}

// Shadows

deck,
leaflet {
  > dimming {
    background: rgba(0, 0, 0, 0.12);
  }

  > border {
    min-width: 1px;
    min-height: 1px;
    background: rgba(0, 0, 0, 0.05);
  }

  > shadow {
    min-width: 56px;
    min-height: 56px;

    &.left  { @include background-shadow(to right); }
    &.right { @include background-shadow(to left); }
    &.up    { @include background-shadow(to bottom); }
    &.down  { @include background-shadow(to top); }
  }
}

// Avatar

avatar {
  border-radius: 9999px;
  -gtk-outline-radius: 9999px;
  font-weight: bold;

  // The list of colors to generate avatars.
  // Each avatar color is rapresented by a font color, a gradient start color and a gradient stop color.
  // There are 10 differnt colors for avtars in the list if you change the number of them you 
  // need to update the NUMBER_OF_COLORS in src/hdy-avatar.c.
  // The 2D list has this form: ((font-color, gradient-top-color, gradient-bottom-color)).

  $avatarcolorlist: (
    (#d99d0a, #f9eaaf, #e5d475)
    (#e5763a, #ffdcb2, #ffbb69)
    (#db4651, #f6cac7, #f6968c)
    (#cf5d95, #fedae9, #fda7c5)
    (#4583cc, #d2e6fa, #9ec5f7)
    (#9552b0, #e7c8e8, #d291d2)
    (#916949, #e5d6ca, #cdab8f)
    (#64626b, #d8d7d3, #aeada8)
    (#11a0cf, #c4f0fe, #82daf6)
    (#28ab6f, #c4f2cf, #82d49f)
  );

  @if $variant == 'dark' {
    $avatarcolorlist: (
      (#f9f4e1, #f5ca35, #ce8d09)
      (#ffe5c5, #ff8c26, #cf4900)
      (#f6c8c4, #ed333b, #b01f30)
      (#fad1df, #ec86a9, #bf4e86)
      (#cfe1f5, #62a0ea, #1a5fb4)
      (#e7c2e8, #b154bb, #76419e)
      (#e5d6ca, #b5835a, #704f32)
      (#d8d7d3, #9a9996, #5e5c64)
      (#b9eefe, #0bbaf4, #098ab2)
      (#cbf7d5, #57e389, #26a269)
    );
  }
  @for $i from 1 through length($avatarcolorlist) {
    &.color#{$i} {
      $avatarcolor: nth($avatarcolorlist, $i);
      background-image: linear-gradient(nth($avatarcolor, 2), nth($avatarcolor, 3));
      color: nth($avatarcolor, 1);
    }
  }

  &.contrasted { color: #fff; }
}
