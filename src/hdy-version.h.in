/*
 * Copyright (C) 2017 Purism SPC
 *
 * SPDX-License-Identifier: LGPL-2.1+
 */

#pragma once

#if !defined(_HANDY_INSIDE) && !defined(HANDY_COMPILATION)
#error "Only <handy.h> can be included directly."
#endif

#include <glib.h>

/**
 * SECTION:hdy-version
 * @short_description: Handy version checking
 *
 * Handy provides macros to check the version of the library at compile-time
 */

/**
 * HDY_MAJOR_VERSION:
 *
 * Hdy major version component (e.g. 1 if %HDY_VERSION is 1.2.3)
 */
#define HDY_MAJOR_VERSION              (@HDY_MAJOR_VERSION@)

/**
 * HDY_MINOR_VERSION:
 *
 * Hdy minor version component (e.g. 2 if %HDY_VERSION is 1.2.3)
 */
#define HDY_MINOR_VERSION              (@HDY_MINOR_VERSION@)

/**
 * HDY_MICRO_VERSION:
 *
 * Hdy micro version component (e.g. 3 if %HDY_VERSION is 1.2.3)
 */
#define HDY_MICRO_VERSION              (@HDY_MICRO_VERSION@)

/**
 * HDY_VERSION
 *
 * Hdy version.
 */
#define HDY_VERSION                    (@HDY_VERSION@)

/**
 * HDY_VERSION_S:
 *
 * Handy version, encoded as a string, useful for printing and
 * concatenation.
 */
#define HDY_VERSION_S                  "@HDY_VERSION@"

#define HDY_ENCODE_VERSION(major,minor,micro) \
        ((major) << 24 | (minor) << 16 | (micro) << 8)

/**
 * HDY_VERSION_HEX:
 *
 * Handy version, encoded as an hexadecimal number, useful for
 * integer comparisons.
 */
#define HDY_VERSION_HEX \
        (HDY_ENCODE_VERSION (HDY_MAJOR_VERSION, HDY_MINOR_VERSION, HDY_MICRO_VERSION))

/**
 * HDY_CHECK_VERSION:
 * @major: required major version
 * @minor: required minor version
 * @micro: required micro version
 *
 * Compile-time version checking. Evaluates to %TRUE if the version
 * of handy is greater than the required one.
 */
#define HDY_CHECK_VERSION(major,minor,micro)   \
        (HDY_MAJOR_VERSION > (major) || \
         (HDY_MAJOR_VERSION == (major) && HDY_MINOR_VERSION > (minor)) || \
         (HDY_MAJOR_VERSION == (major) && HDY_MINOR_VERSION == (minor) && \
          HDY_MICRO_VERSION >= (micro)))

#ifndef _HDY_EXTERN
#define _HDY_EXTERN extern
#endif

/**
 * HDY_DISABLE_DEPRECATION_WARNINGS:
 *
 * A macro that should be defined before including the handy.h header. If it is
 * defined, no compiler warnings will be produced for uses of deprecated
 * libhandy APIs.
 */

#ifdef HDY_DISABLE_DEPRECATION_WARNINGS

#define HDY_DEPRECATED _HDY_EXTERN
#define HDY_DEPRECATED_FOR(f) _HDY_EXTERN
#define HDY_UNAVAILABLE(major,minor,micro) _HDY_EXTERN

#else

#define HDY_DEPRECATED G_DEPRECATED _HDY_EXTERN
#define HDY_DEPRECATED_FOR(f) G_DEPRECATED_FOR(f) _HDY_EXTERN
#if    __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
#define HDY_UNAVAILABLE(major,minor,micro) __attribute__((deprecated("Not available before " #major "." #minor "." #micro))) _HDY_EXTERN
#elif defined(_MSC_FULL_VER) && (_MSC_FULL_VER > 140050320)
#define HDY_UNAVAILABLE(major,minor,micro) __declspec(deprecated("is not available before " #major "." #minor "." #micro)) _HDY_EXTERN
#else
#define HDY_UNAVAILABLE(major,minor,micro) G_DEPRECATED _HDY_EXTERN
#endif

#endif

/* XXX: Every new stable minor release bump should add a macro here */

/**
 * HDY_VERSION_0_0_8:
 *
 * A macro that evaluates to the 0.0.8 version of libhandy, in a format that can
 * be used by the C pre-processor.
 *
 * Since: 0.0.8
 */
#define HDY_VERSION_0_0_8         (HDY_ENCODE_VERSION (0, 0, 8))

/* Evaluates to the current stable version; for development cycles, this means
 * the next stable target
 */
#define HDY_VERSION_CUR_STABLE         (HDY_ENCODE_VERSION (HDY_MAJOR_VERSION, HDY_MINOR_VERSION, HDY_MICRO_VERSION))

/* Evaluates to the previous stable version */
#define HDY_VERSION_PREV_STABLE        (HDY_ENCODE_VERSION (HDY_MAJOR_VERSION, HDY_MINOR_VERSION, HDY_MICRO_VERSION - 1))

/**
 * HDY_VERSION_MIN_REQUIRED:
 *
 * A macro that should be defined by the user prior to including the handy.h
 * header. The definition should be one of the predefined HDY version macros:
 * %HDY_VERSION_0_0_8, ...
 *
 * This macro defines the lower bound for the libhandy API to use.
 *
 * If a function has been deprecated in a newer version of libhandy, it is
 * possible to use this symbol to avoid the compiler warnings without disabling
 * warning for every deprecated function.
 *
 * Since: 0.0.8
 */
#ifndef HDY_VERSION_MIN_REQUIRED
# define HDY_VERSION_MIN_REQUIRED      (HDY_VERSION_CUR_STABLE)
#endif

/**
 * HDY_VERSION_MAX_ALLOWED:
 *
 * A macro that should be defined by the user prior to including the handy.h
 * header. The definition should be one of the predefined libhandy version
 * macros: %HDY_VERSION_0_0_8, ...
 *
 * This macro defines the upper bound for the libhandy API to use.
 *
 * If a function has been introduced in a newer version of libhandy, it is
 * possible to use this symbol to get compiler warnings when trying to use that
 * function.
 *
 * Since: 0.0.8
 */
#ifndef HDY_VERSION_MAX_ALLOWED
# if HDY_VERSION_MIN_REQUIRED > HDY_VERSION_PREV_STABLE
#  define HDY_VERSION_MAX_ALLOWED      HDY_VERSION_MIN_REQUIRED
# else
#  define HDY_VERSION_MAX_ALLOWED      HDY_VERSION_CUR_STABLE
# endif
#endif

/* Sanity checks */
#if HDY_VERSION_MAX_ALLOWED < HDY_VERSION_MIN_REQUIRED
#error "HDY_VERSION_MAX_ALLOWED must be >= HDY_VERSION_MIN_REQUIRED"
#endif
#if HDY_VERSION_MIN_REQUIRED < HDY_VERSION_0_0_8
#error "HDY_VERSION_MIN_REQUIRED must be >= HDY_VERSION_0_0_8"
#endif

#define HDY_AVAILABLE_IN_ALL                  _HDY_EXTERN

/* XXX: Every new stable minor release should add a set of macros here */

#if HDY_VERSION_MIN_REQUIRED >= HDY_VERSION_0_0_8
# define HDY_DEPRECATED_IN_0_0_8              HDY_DEPRECATED
# define HDY_DEPRECATED_IN_0_0_8_FOR(f)       HDY_DEPRECATED_FOR(f)
#else
# define HDY_DEPRECATED_IN_0_0_8              _HDY_EXTERN
# define HDY_DEPRECATED_IN_0_0_8_FOR(f)       _HDY_EXTERN
#endif

#if HDY_VERSION_MAX_ALLOWED < HDY_VERSION_0_0_8
# define HDY_AVAILABLE_IN_0_0_8               HDY_UNAVAILABLE(0, 0, 8)
#else
# define HDY_AVAILABLE_IN_0_0_8               _HDY_EXTERN
#endif
